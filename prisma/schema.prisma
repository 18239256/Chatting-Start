// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  // provider = "postgresql"
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  expiredAt      DateTime? @updatedAt

  robotOwnerId String? @db.ObjectId
  robotOwner   User?   @relation("RobotOwner", fields: [robotOwnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  robotUsers   User[]  @relation("RobotOwner")

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]

  isRobot    Boolean?
  knowledges Knowledge[]
  robot      Robot?

  assignRoleIds String[] @db.ObjectId
  assignRole    Role[]   @relation("assign", fields: [assignRoleIds], references: [id])

  sharedRobotIds String[] @db.ObjectId
  shareRobots    Robot[]  @relation("shareRob", fields: [sharedRobotIds], references: [id])

  wxAccount WXBasis?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  referenceDocs String?

  isLoading Boolean?
}

model Knowledge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  displayName String
  // vectorIDName      String
  // vectorDB          String
  // embeddingModel    String
  realName    String   @unique
  createdAt   DateTime @default(now())
  image       String?
  description String?
  isShare     Boolean  @default(false)
  vsType      String   @default("normal") ///"normal":正常知识库; "graph":知识图谱

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RobotTemplate {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  apiUrl           String
  knowledgeAbility Boolean?
  searchAbility    Boolean?

  robots Robot[]
}

model Robot {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime @default(now())
  description String?

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  robotTempId String        @db.ObjectId
  robotTemp   RobotTemplate @relation(fields: [robotTempId], references: [id])

  model             String?
  temperature       Float?
  historyRound      Int?
  knowledgeBaseName String?
  searchEngineName  String?
  topK              Int?

  isShared     Boolean?
  consumeIds   String[] @db.ObjectId
  consumeUsers User[]   @relation("shareRob", fields: [consumeIds], references: [id])

  maskId String?    @db.ObjectId
  mask   RobotMask? @relation(fields: [maskId], references: [id])

  wxContacts WXContacts[]
}

model RobotMask {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  createdAt   DateTime @default(now())
  content     String
  description String

  refRobots Robot[]
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime @default(now())
  description String
  image       String?
  defaultRole Boolean?

  channels String[]

  assignIds String[] @db.ObjectId
  assign    User[]   @relation("assign", fields: [assignIds], references: [id])
}

model WXBasis {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  createdAt       DateTime @default(now())
  termScreenName  String
  online          Boolean
  qrUrl           String?
  defaultAIType   String?
  maxRoomNumber   Int?
  maxPersonNumber Int?

  ownerUserId String @unique @db.ObjectId
  user        User   @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)

  wxContacts WXContacts[]

  wxGroupIssueMessages WXGroupIssueMessages[]
}

model WXContacts {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  alias       String?
  wxContactID String?
  createdAt   DateTime @default(now())

  wxInstanceId String  @db.ObjectId
  wxInstance   WXBasis @relation(fields: [wxInstanceId], references: [id], onDelete: Cascade)

  isRoom  Boolean   @default(false)
  expired DateTime?

  robotId String? @db.ObjectId
  robot   Robot?  @relation(fields: [robotId], references: [id], onDelete: Cascade)

  issueMessages WXIssueMessages[]

  groupIssueMessagesIds String[]               @db.ObjectId
  groupIssueMessages    WXGroupIssueMessages[] @relation("groupsending", fields: [groupIssueMessagesIds], references: [id])
}

model WXIssueMessages {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  message       String?
  fileName      String?
  isTextMessage Boolean @default(true)
  deliveried    Boolean @default(false) //消息发送状态

  createdAt  DateTime  @default(now()) //创建消息时间
  deliveryAt DateTime? //实际发送消息时间
  issuedAt   DateTime  @default(now()) //计划发送消息时间

  recipientId String     @db.ObjectId
  recipient   WXContacts @relation(fields: [recipientId], references: [id])
}

model WXGroupIssueMessages {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  message       String?
  fileName      String?
  isTextMessage Boolean @default(true)
  deliveried    Boolean @default(false) //消息发送状态

  createdAt  DateTime  @default(now()) //创建消息时间
  deliveryAt DateTime? //实际发送消息时间
  issuedAt   DateTime  @default(now()) //计划发送消息时间

  recipientIds String[]     @db.ObjectId
  recipients   WXContacts[] @relation("groupsending", fields: [recipientIds], references: [id])

  wxInstanceId String  @db.ObjectId
  wxInstance   WXBasis @relation(fields: [wxInstanceId], references: [id], onDelete: Cascade)
}

enum RoleType {
  USER
  ADMIN
  ROBOT
}
