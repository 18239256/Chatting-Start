// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  expiredAt       DateTime? @updatedAt

  robotOwnerId    String? @db.ObjectId
  robotOwner      User?   @relation("RobotOwner", fields: [robotOwnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  robotUsers      User[]  @relation("RobotOwner")
  
  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])
  
  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]

  isRobot    Boolean?
  knowledges Knowledge[]
  robot Robot?

  assignRoleIds String[] @db.ObjectId
  assignRole    Role[] @relation("assign",fields: [assignRoleIds], references: [id])

  sharedRobotIds     String[] @db.ObjectId
  shareRobots        Robot[] @relation("shareRob", fields: [sharedRobotIds], references: [id])
}

model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  
  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)

  referenceDocs  String?

  isLoading Boolean?
}

model Knowledge{
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  displayName       String
  // vectorIDName      String
  // vectorDB          String
  // embeddingModel    String
  realName          String  @unique
  createdAt         DateTime @default(now())
  image             String?
  description       String?
  isShare           Boolean @default(false)

  userId            String   @db.ObjectId
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RobotTemplate{
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  apiUrl            String
  knowledgeAbility  Boolean?
  searchAbility     Boolean?

  robots Robot[]
}

model Robot{
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  createdAt          DateTime @default(now())
  description        String?

  userId             String   @db.ObjectId @unique
  user User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  robotTempId        String   @db.ObjectId
  robotTemp RobotTemplate @relation(fields: [robotTempId], references: [id])

  model              String?
  temperature        Float?
  historyRound       Int?
  knowledgeBaseName  String?
  searchEngineName   String?
  topK               Int?

  isShared           Boolean?
  consumeIds         String[] @db.ObjectId
  consumeUsers       User[] @relation("shareRob", fields: [consumeIds], references: [id])

  maskId            String?   @db.ObjectId
  mask              RobotMask? @relation(fields: [maskId], references: [id])
}

model RobotMask{
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  createdAt          DateTime @default(now())
  content            String
  description        String

  refRobots         Robot[]
}

model Role{
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  createdAt          DateTime @default(now())
  description        String
  image              String?
  defaultRole        Boolean?

  channels           String[]

  assignIds        String[] @db.ObjectId
  assign           User[] @relation("assign", fields: [assignIds], references: [id])
}


enum RoleType {
  USER
  ADMIN
  ROBOT
}
